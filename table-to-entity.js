//const args = process.argv;
//const table = args[3];

/// The table properties generated by SQL Management Studio
const table = ``;

/// Example:
/*
    const table = `
        [Id] [uniqueidentifier] NOT NULL,
        [Nr] [varchar](64) NULL,
        [Data] [datetime] NOT NULL,
    `;
*/

/// Parse the table to prop objects
function tableToProps(table) {

    const lines = table.split(/\r?\n/);
    const props = [];

    for (let line of lines){

        if (line.trim().length === 0)
            continue;

        const lineLwr = line.toLowerCase();
        const isNullable = !lineLwr.includes(" not null");

        let propType = null;

        if (lineLwr.includes("[uniqueidentifier]")) {
            propType = "Guid"
        } else if (lineLwr.includes("[varchar]") || lineLwr.includes("[nvarchar]")) {
            propType = "string";
        } else if (lineLwr.includes("[bit]")) {
            propType = "bool";
        } else if (lineLwr.includes("[int]")) {
            propType = "int";
        } else if (lineLwr.includes("[bigint]")) {
            propType = "long";
        } else if (lineLwr.includes("[float]")) {
            propType = "float";
        } else if (lineLwr.includes("[decimal]") || lineLwr.includes("number")) {
            propType = "decimal";
        } else if (lineLwr.includes("[datetime]")) {
            propType = "DateTime";
        } else if (lineLwr.includes("[time]")) {
            propType = "TimeSpan";
        } else {
            propType = "UNKNOWN_TYPE";
        }
        
        const trimmedLine = line.trim();
        const propName = trimmedLine.substring(0, trimmedLine.indexOf(" ")).replace("]", "").replace("[", "").trim();

        props.push({
            propName,
            propType,
            isNullable
        });
    }

    return props;
}

/// Convert the prop objects to C# props
function tableToCsharpEntity(table) {

    const props = tableToProps(table);
    const lines = [];

    for (let prop of props){
        const line = `public ${prop.propType}${(prop.isNullable ? "?" : "")} ${prop.propName} { get; set; }`
        lines.push(line);
    }

    return lines.join("\n");
}

function decapitalizeFirstLetter(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
}

/// Convert the prop objects to Typescript props
function tableToTypescriptEntity(table, allNullable) {

    const props = tableToProps(table);
    const lines = [];

    for (let prop of props){

        let propType = "";

        if (["float", "decimal", "int"].includes(prop.propType)) {
            propType = "number";
        } else if (prop.propType == "bool") {
            propType = "bool";
        } else {
            propType = "string";
        }

        const line = `${decapitalizeFirstLetter(prop.propName)}${(allNullable || prop.isNullable ? "?" : "")}: ${propType};`
        lines.push(line);
    }

    return lines.join("\n");
}

if (table != null && table.trim().length > 0) {
    console.log("C#:")
    console.log("------------")
    console.log(tableToCsharpEntity(table));
    console.log("\n");
    console.log("Typescript:");
    console.log("------------")
    console.log(tableToTypescriptEntity(table, true));
} else {
    console.log("No table definition specified");
}